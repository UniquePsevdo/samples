'use strict';

var _ava = require('ava');

function permute(string) {
    return permuteArray(string.split(''));
}

// returns array
// uses flatten
// inside flatten recursively permuteArray and without
function permuteArray(array) {
    //console.log('permuteArray1: ', array)
    switch (array.length) {
        case 0:
            return [];
        case 1:
            return array;
        /*
                default: return flatten(array.map(a => permuteArray(without(array, a)).map(b => a.concat(b))))
        */
        default:
            return flatten(array.map(a => {
                console.log('permuteArray2: ', permuteArray(without(array, a)).map(b => {
                    // console.log('map(b) b: ', b);
                    return a.concat(b);
                }));
                return permuteArray(without(array, a)).map(b => {
                    // console.log('map(b) b: ', b);
                    return a.concat(b);
                });
            }));
    }
}

// takes an array as argument
// returns an array, initial []
//
function flatten(array) {
    // console.log('flatten: ', array)
    return array.reduce((a, b) => a.concat(b), []);
}

// takes array and character
// creates copy of an array
// removes passed char
function without(array, a) {
    // console.log('without ', array, a);
    const bs = array.slice(0);
    bs.splice(array.indexOf(a), 1);
    return bs;
}

/// tests

(0, _ava.test)(t => t.deepEqual(permute(''), []));
(0, _ava.test)(t => t.deepEqual(permute('abc'), ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']));
//# sourceMappingURL=/Users/mac/WebstormProjects/interview/node_modules/.cache/ava/2b2961b0d17cc2ed5fa0f5a07c654def.js.map