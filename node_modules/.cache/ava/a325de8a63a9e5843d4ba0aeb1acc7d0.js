"use strict";

// Реализуйте функцию isPrime(), которая возвращает true или false, указывая, является ли переданное ей число простым.

/*
isPrime(0)                          // false
isPrime(1)                          // false
isPrime(17)                         // true
isPrime(10000000000000)             // false
*/

/*
Свойство числа быть простым называется простотой. Простой, но медленный метод проверки простоты заданного числа n
известен как перебор делителей. Он состоит из проверки того, является ли n кратным целому числу от 2 до корня из n.
Алгоритмы, намного более эффективные, чем перебор делителей, были разработаны для проверки простоты больших чисел.
К ним относятся Тест Миллера-Рабина, который является быстрым, но имеет небольшую вероятность ошибки и тест AKS,
который всегда дает правильный ответ за полиномиальное время, но слишком медленный, чтобы быть использованным.
*/

/*function isPrime(n) {
if (n < 2) {
    return false
}
for (let i = 2; i < Math.ceil(Math.sqrt(n)) + 1; i++) {
    if (n % i === 0 && i !== n) {
        return false
    }
}
return true
}*/
// алгоритм определения является ли число простым заключается в том чтобы;
// 1) узнать меньше двух оно или нет, если меньше то false;
// 2) проитерировать от двух до округленного корня + 1 не включая;
// n % i === 0 && i !== n; (i !== n) - only for one case for n = 2;
// иными словами, если остаток от деления числа на какое-то из промежутка равно 0 и число не равно 2 (потому что 2%2 = 0) то false
// иначе true;

/*function isPrime(val){
    if(val < 2){
        return false;
    }
    for(let i = 2; i < Math.ceil(Math.sqrt(val))+1; i++){
        console.log(i);
        if(val % i===0 && i!==val){
            return false;
        }
    }
    return true
}*/

/*function isPrime(val){
    if(val<2){
        return false;
    }
    for(let i = 2; i < Math.ceil(Math.sqrt(val))+1; i++){
        if(val%i===0 && i!==val){
            return false;
        }
    }
    return true;
}*/

function isPrime(val) {
    if (val < 2) {
        return false;
    }
    for (let i = 2; i < Math.ceil(Math.sqrt(val)) + 1; i++) {
        if (val % i === 0 && i !== val) {
            return false;
        }
    }
    return true;
}

console.log(isPrime(4));
//# sourceMappingURL=/Users/mac/WebstormProjects/interview/node_modules/.cache/ava/a325de8a63a9e5843d4ba0aeb1acc7d0.js.map