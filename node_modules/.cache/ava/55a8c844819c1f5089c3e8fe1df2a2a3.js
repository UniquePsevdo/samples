'use strict';

var _ava = require('ava');

/*let reduceAsync = async (array, fn, value) => {
    for (let a of array) {
        value = fn(value, await a())
    }
    return value
}*/

let reduceAsync = async (array, fn, val) => {
    for (let a of array) {
        val = fn(val, (await a()));
    }
    return val;
};
/// tests
// суть тестов заключается в том, что создаются функции которые возвращают промисы с выполненными значениями
// одно из них с таймаутом
//

(0, _ava.test)(async t => {
    let a = () => Promise.resolve('a');
    let b = () => Promise.resolve('a');
    let c = () => new Promise(resolve => {
        setTimeout(() => {
            resolve('c');
        }, 100);
    });
    t.deepEqual(reduceAsync([a, b, c], (acc, current) => [...acc, current], []), ['a', 'b', 'c']);
    t.deepEqual(reduceAsync([a, b, c], (acc, current) => [...acc, current], ['d']), ['d', 'a', 'b', 'c']);
});

/*test(async t => {
    let a = () => Promise.resolve('a')
    let b = () => Promise.resolve('b')
    let c = () => new Promise(resolve => setTimeout(() => resolve('c'), 100))

    t.deepEqual(
        await reduceAsync([a, b, c], (accum, value) => [...accum, value], []),
        ['a', 'b', 'c']
    )
    t.deepEqual(
        await reduceAsync([a, c, b], (accum, value) => [...accum, value], ['d']),
        ['d', 'a', 'c', 'b']
    )
})
*/
//# sourceMappingURL=/Users/mac/WebstormProjects/interview/node_modules/.cache/ava/55a8c844819c1f5089c3e8fe1df2a2a3.js.map