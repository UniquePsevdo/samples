'use strict';

// Суть заключается в том, чтобы проитерировать по ...sources на верхнем уровне по значениям (числа или объекты)
// на вложенном уровне по ключам итерируемых объектов верхнего уровня
// дальше делается проверка на то, является ли объектом вложенный итерируемый объект isObject(source[key], если нет, то значение
// присваивается текущему ключу
// если да то делается еще одна проверка на то является ли объектом целевой объект с итерируемым ключом
// если нет, то создается пустой объект target[key] = {}
// на выходе из условия имеем некий объект target[key] пустой или нет и рекурсивно вызывается assignDeep c параметрами переданными
// 1 - target[key] 2 - source[key]

/*function assignDeep(target, ...sources) {
    for (let source of sources) {               // iterates over enumerable values of an object
        for (let key in source) {               // iterates over object keys
            if (isObject(source[key])) {        //
                if (!isObject(target[key])) {   //
                    target[key] = {}
                }
                assignDeep(target[key], source[key])
            } else {
                target[key] = source[key]
            }
        }
    }
    return target
}

function isObject(a) {
    return typeof a === 'object' && a !== null
}*/

function assignDeep(target, ...sources) {
    for (let source of sources) {
        for (let key in source) {
            if (isObject(source[key])) {
                if (!isObject(target[key])) {
                    target[key] = {};
                }
                assignDeep(target[key], source[key]);
            } else {
                target[key] = source[key];
            }
        }
    }
    return target;
}

function isObject(obj) {
    return typeof obj === 'object' && obj !== null;
}

let obj1 = { a: 1 };
console.log(assignDeep({ a: 1 }, { b: 2 }));
//# sourceMappingURL=/Users/mac/WebstormProjects/interview/node_modules/.cache/ava/9bcac058cc01e1dbc356f84ba627e475.js.map