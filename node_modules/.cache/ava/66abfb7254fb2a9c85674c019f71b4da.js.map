{"version":3,"sources":["isPrime.js"],"names":["isPrime","val","i","Math","ceil","sqrt","t","falsy","truthy"],"mappings":";;;;;AAyEA;;AAzEA;;AAEA;;;;;;;AAOA;;;;;;;;AASI;;;;;;;;;;;AAWJ;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;AAYA,SAASA,OAAT,CAAiBC,GAAjB,EAAqB;AACjB,QAAGA,MAAM,CAAT,EAAW;AACP,eAAO,KAAP;AACH;AACD,SAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIC,KAAKC,IAAL,CAAUD,KAAKE,IAAL,CAAUJ,GAAV,CAAV,IAA0B,CAA7C,EAAgDC,GAAhD,EAAoD;AAChD,YAAGD,MAAIC,CAAJ,KAAQ,CAAR,IAAaA,MAAID,GAApB,EAAwB;AACpB,mBAAO,KAAP;AACH;AACJ;AACD,WAAO,IAAP;AACH;;AAGD,eAAK,yBAAL,EAAgCK;AAAA;;AAAA,WAAGA,EAAEC,KAAF,uBAAQP,QAAQ,CAAR,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;AAAA,CAAhC;AACA,eAAK,sBAAL,EAA6BM;AAAA;;AAAA,WAAGA,EAAEE,MAAF,yBAASR,QAAQ,EAAR,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;AAAA,CAA7B","file":"isPrime.js","sourcesContent":["// Реализуйте функцию isPrime(), которая возвращает true или false, указывая, является ли переданное ей число простым.\n\n/*\nisPrime(0)                          // false\nisPrime(1)                          // false\nisPrime(17)                         // true\nisPrime(10000000000000)             // false\n*/\n\n/*\nСвойство числа быть простым называется простотой. Простой, но медленный метод проверки простоты заданного числа n\nизвестен как перебор делителей. Он состоит из проверки того, является ли n кратным целому числу от 2 до корня из n.\nАлгоритмы, намного более эффективные, чем перебор делителей, были разработаны для проверки простоты больших чисел.\nК ним относятся Тест Миллера-Рабина, который является быстрым, но имеет небольшую вероятность ошибки и тест AKS,\nкоторый всегда дает правильный ответ за полиномиальное время, но слишком медленный, чтобы быть использованным.\n*/\n\n\n    /*function isPrime(n) {\n    if (n < 2) {\n        return false\n    }\n    for (let i = 2; i < Math.ceil(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0 && i !== n) {\n            return false\n        }\n    }\n    return true\n}*/\n// алгоритм определения является ли число простым заключается в том чтобы;\n// 1) узнать меньше двух оно или нет, если меньше то false;\n// 2) проитерировать от двух до округленного корня + 1 не включая;\n// n % i === 0 && i !== n; (i !== n) - only for one case for n = 2;\n// иными словами, если остаток от деления числа на какое-то из промежутка равно 0 и число не равно 2 (потому что 2%2 = 0) то false\n// иначе true;\n\n/*function isPrime(val){\n    if(val < 2){\n        return false;\n    }\n    for(let i = 2; i < Math.ceil(Math.sqrt(val))+1; i++){\n        console.log(i);\n        if(val % i===0 && i!==val){\n            return false;\n        }\n    }\n    return true\n}*/\n\n/*function isPrime(val){\n    if(val<2){\n        return false;\n    }\n    for(let i = 2; i < Math.ceil(Math.sqrt(val))+1; i++){\n        if(val%i===0 && i!==val){\n            return false;\n        }\n    }\n    return true;\n}*/\n\nfunction isPrime(val){\n    if(val < 2){\n        return false;\n    }\n    for(let i = 2; i < Math.ceil(Math.sqrt(val))+1; i++){\n        if(val%i===0 && i!==val){\n            return false\n        }\n    }\n    return true;\n}\n\nimport {test} from 'ava'\ntest('4 is not a prime number', t=>t.falsy(isPrime(4)))\ntest('13 is a prime number', t=>t.truthy(isPrime(13)))"]}