{"version":3,"sources":["permute.js"],"names":["permute","str","permuteArr","split","without","arr","a","result","splice","indexOf","flatten","console","log","reduce","acc","curr","concat","length","map","b","t","deepEqual"],"mappings":";;AA6CA;;AA7CA;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASA,OAAT,CAAiBC,GAAjB,EAAqB;AACjB,WAAOC,WAAWD,IAAIE,KAAJ,CAAU,EAAV,CAAX,CAAP;AACH;;AAED,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,CAAtB,EAAwB;AACpB,QAAIC,SAAS,CAAC,GAAGF,GAAJ,CAAb;AACAE,WAAOC,MAAP,CAAcH,IAAII,OAAJ,CAAYH,CAAZ,CAAd,EAA8B,CAA9B;AACA,WAAOC,MAAP;AACH;;AAED,SAASG,OAAT,CAAiBL,GAAjB,EAAqB;AACjBM,YAAQC,GAAR,CAAYP,IAAIQ,MAAJ,CAAW,CAACC,GAAD,EAAMC,IAAN,KAAa,CAAC,GAAGD,GAAJ,EAAS,GAAGC,IAAZ,CAAxB,EAA2C,EAA3C,CAAZ;AACA,WAAOV,IAAIQ,MAAJ,CAAW,CAACC,GAAD,EAAMC,IAAN,KAAaD,IAAIE,MAAJ,CAAWD,IAAX,CAAxB,EAA0C,EAA1C,CAAP;AACA;AACH;;AAED,SAASb,UAAT,CAAoBG,GAApB,EAAwB;AACpB,QAAGA,IAAIY,MAAJ,GAAa,CAAhB,EAAkB;AACd,eAAOZ,GAAP;AACH;AACD,WAAOK,QAAQL,IAAIa,GAAJ,CAASZ,CAAD,IAAKJ,WAAWE,QAAQC,GAAR,EAAaC,CAAb,CAAX,EAA4BY,GAA5B,CAAiCC,CAAD,IAAKb,EAAEU,MAAF,CAASG,CAAT,CAArC,CAAb,CAAR,CAAP;AACH;;AAED;;;AAGA,eAAKC,KAAKA,EAAEC,SAAF,CAAYrB,QAAQ,EAAR,CAAZ,EAAyB,EAAzB,CAAV;AACA,eAAKoB,KAAKA,EAAEC,SAAF,CAAYrB,QAAQ,KAAR,CAAZ,EAA4B,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,CAA5B,CAAV","file":"permute.js","sourcesContent":["/*function permute(str){\n    return permuteArr(str.split(''))\n}\n\nfunction flatten(arr){\n    return arr.reduce((acc, curr)=>acc.concat(curr), [])\n}\n\nfunction without(arr, a){\n    let result = [...arr]\n    result.splice(arr.indexOf(a), 1)\n    return result\n}\n\nfunction permuteArr(arr){\n    if(arr.length < 2){\n        return arr\n    }\n    return flatten(arr.map(a => permuteArr(without(arr, a)).map((b)=>a.concat(b))))\n}*/\n\nfunction permute(str){\n    return permuteArr(str.split(''));\n}\n\nfunction without(arr, a){\n    let result = [...arr];\n    result.splice(arr.indexOf(a), 1);\n    return result;\n}\n\nfunction flatten(arr){\n    console.log(arr.reduce((acc, curr)=>[...acc, ...curr], []));\n    return arr.reduce((acc, curr)=>acc.concat(curr), [])\n    //return arr.reduce((acc, curr)=>[...acc, curr], [])\n}\n\nfunction permuteArr(arr){\n    if(arr.length < 2){\n        return arr;\n    }\n    return flatten(arr.map((a)=>permuteArr(without(arr, a)).map((b)=>a.concat(b))))\n}\n\n// tests\nimport { test } from 'ava'\n\ntest(t => t.deepEqual(permute(''), []))\ntest(t => t.deepEqual(permute('abc'), ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']))"]}