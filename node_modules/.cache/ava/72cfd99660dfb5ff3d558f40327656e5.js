"use strict";

// суть заключается в том, что нужно создать два метода, сорт и мердж
// в сорт передавать массив, в методе сорт делать проверку на длину массива и если он
// меньше двух - возвращать его
// в нем также определяется индекс середины и он делится пополам методом slice, левый slice(0, mid), правый slice(mid)
// метод сорт возвращает выполняемую функцию мерджб в которую передаются рекурсивно функции сортировки половинок поделенных массивов
// в метод  мердж

/*function sort(array){
    if (array.length < 2){
        return array
    }
    let mid = Math.floor(array.length / 2)
    let left = array.slice(0, mid)
    let right = array.slice(mid)
    return merge(sort(left), sort(right))
}

function merge(left, right){
    let result = []
    let indexLeft = 0
    let indexRight = 0
    while (indexLeft < left.length && indexRight < right.length) {
        result.push(
            left[indexLeft] < right[indexRight]
                ? left[indexLeft++]
                : right[indexRight++]
        )
    }
    return result
        .concat(left.slice(indexLeft))
        .concat(right.slice(indexRight))
}*/
function sort(arr) {
    if (arr.length < 2) {
        return arr;
    }
    let mid = Math.floor(arr.length / 2);
    let left = arr.slice(0, mid);
    let right = arr.slice(mid);
    return merge(sort(left), sort(right));
}
function merge(left, right) {
    let result = [],
        leftIdx = 0,
        rightIdx = 0;

    while (leftIdx < left.length && rightIdx < right.length) {
        result.push(left[leftIdx] < right[rightIdx] ? left[leftIdx++] : right[rightIdx++]);
    }
    return result.concat(left.slice(leftIdx)).concat(right.slice(rightIdx));
}
console.log(sort([11, 12, 3, 9, 10, 5]));
//# sourceMappingURL=/Users/mac/WebstormProjects/interview/node_modules/.cache/ava/72cfd99660dfb5ff3d558f40327656e5.js.map