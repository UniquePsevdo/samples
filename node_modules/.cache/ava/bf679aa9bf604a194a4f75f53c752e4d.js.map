{"version":3,"sources":["debounce.js"],"names":["debounce","fn","delay","last","time","timerId","Date","now","clearTimeout","setTimeout","cb","t","plan","count","a","is","end","b"],"mappings":";;AA6BA;;AA7BA,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,QAAQ,CAA9B,EAAiC;;AAE7B;AACA,QAAIC,OAAO;AACPC,cAAM,IADC;AAEPC,iBAAS;;AAGb;AALW,KAAX,CAMA,OAAO,MAAM;AACT,YAAID,OAAOE,KAAKC,GAAL,EAAX;;AAEA;AACA;AACA;AACA,YAAIJ,KAAKC,IAAL,IAAcA,OAAOD,KAAKC,IAAb,GAAqBF,KAAtC,EAA6C;AACzCM,yBAAaL,KAAKE,OAAlB;AACH;;AAED;AACAF,eAAO;AACHC,gBADG;AAEHC,qBAASI,WAAWR,EAAX,EAAeC,KAAf;AAFN,SAAP;AAIH,KAfD;AAgBH;;AAED;;AAIA,UAAKQ,EAAL,CAAQC,KAAK;AACTA,MAAEC,IAAF,CAAO,CAAP;AACA,QAAIC,QAAQ,CAAZ;AACA,QAAIC,IAAI,MAAM;AACVD;AACAF,UAAEI,EAAF,CAAKF,KAAL,EAAY,CAAZ;AACAF,UAAEK,GAAF;AACH,KAJD;AAKA,QAAIC,IAAIjB,SAASc,CAAT,EAAY,GAAZ,CAAR;AACAG;AACAA;AACAA;AACH,CAZD","file":"debounce.js","sourcesContent":["function debounce(fn, delay = 0) {\n\n    // keep track of the last call to the debounced function\n    let last = {\n        time: null,\n        timerId: null\n    }\n\n    // return a debounced version of fn\n    return () => {\n        let time = Date.now()\n\n        // if the debounced function was called again before the delay elapsed,\n        // cancel the timer (started in the previous call) that would have called\n        // fn, and start a new timer.\n        if (last.time && (time - last.time) < delay) {\n            clearTimeout(last.timerId)\n        }\n\n        // start a timer to call fn after the given delay\n        last = {\n            time,\n            timerId: setTimeout(fn, delay)\n        }\n    }\n}\n\n/// tests\n\nimport { test } from 'ava'\n\ntest.cb(t => {\n    t.plan(1)\n    let count = 0\n    let a = () => {\n        count++\n        t.is(count, 1)\n        t.end()\n    }\n    let b = debounce(a, 100)\n    b()\n    b()\n    b()\n})"]}