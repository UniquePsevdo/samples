{"version":3,"sources":["permute.js"],"names":["permute","str","permuteArr","split","flatten","arr","reduce","a","b","concat","withoutArr","result","splice","indexOf","length","map","t","deepEqual"],"mappings":";;AAqDA;;AArDA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAASA,OAAT,CAAiBC,GAAjB,EAAqB;AACjB,WAAOC,WAAWD,IAAIE,KAAJ,CAAU,EAAV,CAAX,CAAP;AACH;;AAED,SAASC,OAAT,CAAiBC,GAAjB,EAAqB;AACjB,WAAOA,IAAIC,MAAJ,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUD,EAAEE,MAAF,CAASD,CAAT,CAArB,EAAkC,EAAlC,CAAP;;AAEJ;;;AAGC;;AAED,SAASE,UAAT,CAAoBL,GAApB,EAAyBE,CAAzB,EAA2B;AACvB,QAAII,SAAS,CAAC,GAAGN,GAAJ,CAAb;AACAM,WAAOC,MAAP,CAAcP,IAAIQ,OAAJ,CAAYN,CAAZ,CAAd,EAA8B,CAA9B;AACA,WAAOI,MAAP;AACH;;AAED,SAAST,UAAT,CAAoBG,GAApB,EAAwB;AACpB,YAAOA,IAAIS,MAAX;AACI,aAAK,CAAL;AACI,mBAAO,EAAP;AACJ,aAAK,CAAL;AACI,mBAAOT,GAAP;AACJ;AAAS,mBAAOD,QAAQC,IAAIU,GAAJ,CAAQR,KAAGL,WAAWQ,WAAWL,GAAX,EAAgBE,CAAhB,CAAX,EAA+BQ,GAA/B,CAAmCP,KAAGA,EAAEC,MAAF,CAASF,CAAT,CAAtC,CAAX,CAAR,CAAP;AALb;AAOH;;AAED;;;AAGA,eAAKS,KAAKA,EAAEC,SAAF,CAAYjB,QAAQ,EAAR,CAAZ,EAAyB,EAAzB,CAAV;AACA,eAAKgB,KAAKA,EAAEC,SAAF,CAAYjB,QAAQ,KAAR,CAAZ,EAA4B,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,CAA5B,CAAV","file":"permute.js","sourcesContent":["/*function permute(arr){\n    return permuteArr(arr.split(''))\n}\n\nfunction permuteArr(arr){\n    switch(arr.length){\n        case 0:\n            return []\n        case 1:\n            return arr\n        default: return flatten(arr.map(a => permuteArr(without(arr, a)).map(b => a.concat(b))))\n    }\n}\n\nfunction without(arr, a){\n    let result = [...arr]\n    result.splice(arr.indexOf(a), 1)\n    return result\n}\n\nfunction flatten(arr){\n    return arr.reduce((acc, curr)=> acc.concat(curr), [])\n}*/\n\nfunction permute(str){\n    return permuteArr(str.split(''))\n}\n\nfunction flatten(arr){\n    return arr.reduce((a, b) => a.concat(b), [])\n\n/*\n    return arr.reduce((acc, curr)=> acc.concat(curr), [])\n*/\n}\n\nfunction withoutArr(arr, a){\n    let result = [...arr]\n    result.splice(arr.indexOf(a), 1)\n    return result\n}\n\nfunction permuteArr(arr){\n    switch(arr.length){\n        case 0:\n            return []\n        case 1:\n            return arr\n        default: return flatten(arr.map(a=>permuteArr(withoutArr(arr, a)).map(b=>b.concat(a))))\n    }\n}\n\n// tests\nimport { test } from 'ava'\n\ntest(t => t.deepEqual(permute(''), []))\ntest(t => t.deepEqual(permute('abc'), ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']))"]}