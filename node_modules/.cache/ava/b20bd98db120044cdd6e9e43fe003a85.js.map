{"version":3,"sources":["reduceAsync.js"],"names":["reduceAsync","array","fn","val","a","t","Promise","resolve","b","c","setTimeout","deepEqual","acc","current"],"mappings":";;AAcA;;AAdA;;;;;;;AAOA,IAAIA,cAAc,OAAOC,KAAP,EAAcC,EAAd,EAAkBC,GAAlB,KAAwB;AACtC,SAAI,IAAIC,CAAR,IAAaH,KAAb,EAAmB;AACfE,cAAMD,GAAGC,GAAH,GAAQ,MAAMC,GAAd,EAAN;AACH;AACD,WAAOD,GAAP;AACH,CALD;;AASA,eAAK,MAAME,CAAN,IAAU;AACX,QAAID,IAAI,MAAME,QAAQC,OAAR,CAAgB,GAAhB,CAAd;AACA,QAAIC,IAAI,MAAMF,QAAQC,OAAR,CAAgB,GAAhB,CAAd;AACA,QAAIE,IAAI,MAAM,IAAIH,OAAJ,CAAYC,WAAW;AAACG,mBAAW,MAAI;AAACH,oBAAQ,GAAR;AAAa,SAA7B,EAA+B,GAA/B;AAAoC,KAA5D,CAAd;;AAEAF,MAAEM,SAAF,EAAY,MAAMX,YAAY,CAACI,CAAD,EAAII,CAAJ,EAAOC,CAAP,CAAZ,EAAuB,CAACG,GAAD,EAAMC,OAAN,KAAgB,CAAC,GAAGD,GAAJ,EAASC,OAAT,CAAvC,EAA0D,EAA1D,CAAlB,GAAiF,CAAC,GAAD,EAAK,GAAL,EAAU,GAAV,CAAjF;AACAR,MAAEM,SAAF,EAAY,MAAMX,YAAY,CAACI,CAAD,EAAII,CAAJ,EAAOC,CAAP,CAAZ,EAAuB,CAACG,GAAD,EAAMC,OAAN,KAAgB,CAAC,GAAGD,GAAJ,EAASC,OAAT,CAAvC,EAA0D,CAAC,GAAD,CAA1D,CAAlB,GAAoF,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAc,GAAd,CAApF;AACH,CAPD;;AASA","file":"reduceAsync.js","sourcesContent":["/*let reduceAsync = async (array, fn, value) => {\n    for (let a of array) {\n        value = fn(value, await a())\n    }\n    return value\n}*/\n\nlet reduceAsync = async (array, fn, val)=>{\n    for(let a of array){\n        val = fn(val, await a())\n    }\n    return val\n}\n\nimport { test } from 'ava'\n\ntest(async t =>{\n    let a = () => Promise.resolve('a')\n    let b = () => Promise.resolve('b')\n    let c = () => new Promise(resolve => {setTimeout(()=>{resolve('c')}, 100)})\n\n    t.deepEqual(await reduceAsync([a, b, c], (acc, current)=>[...acc, current], []), ['a','b', 'c'])\n    t.deepEqual(await reduceAsync([a, b, c], (acc, current)=>[...acc, current], ['d']), ['d','a','b', 'c'])\n})\n\n/*test(async t => {\n    let a = () => Promise.resolve('a')\n    let b = () => Promise.resolve('b')\n    let c = () => new Promise(resolve => setTimeout(() => resolve('c'), 100))\n\n    t.deepEqual(\n        await reduceAsync([a, b, c], (accum, value) => [...accum, value], []),\n        ['a', 'b', 'c']\n    )\n    t.deepEqual(\n        await reduceAsync([a, c, b], (accum, value) => [...accum, value], ['d']),\n        ['d', 'a', 'c', 'b']\n    )\n})\n*/"]}