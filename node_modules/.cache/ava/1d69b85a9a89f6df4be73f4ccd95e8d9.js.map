{"version":3,"sources":["hashMap.js"],"names":["HashMap","constructor","data","get","key","index","hash","slot","undefined","k","v","set","value","console","log","indexInSlot","string","split","reduce","a","b","charCodeAt","t","map","is"],"mappings":";;AA6GA;;AA7GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,MAAMA,OAAN,CAAa;AACTC,kBAAa;AACT,aAAKC,IAAL,GAAY,EAAZ;AACH;;AAEDC,QAAIC,GAAJ,EAAQ;AACJ,YAAIC,QAAQC,KAAKF,GAAL,CAAZ;AACA,YAAIG,OAAO,KAAKL,IAAL,CAAUG,KAAV,CAAX;AACA,YAAG,CAACE,IAAJ,EAAS;AACL,mBAAOC,SAAP;AACH;;AAED,aAAI,IAAI,CAACC,CAAD,EAAIC,CAAJ,CAAR,IAAkBH,IAAlB,EAAuB;AACnB,gBAAGE,MAAML,GAAT,EAAa;AACT,uBAAOM,CAAP;AACH;AACJ;AACJ;;AAED;;;;;;;;;;;;;;;;AAgBAC,QAAIP,GAAJ,EAASQ,KAAT,EAAgB;AACZ;;;;AAIA,YAAIP,QAAQC,KAAKF,GAAL,CAAZ;AACA,YAAIG,OAAO,KAAKL,IAAL,CAAUG,KAAV,CAAX;AACAQ,gBAAQC,GAAR,CAAY,CAAZ,EAAcP,IAAd;AACA,YAAG,CAACA,IAAJ,EAAS;AACLM,oBAAQC,GAAR,CAAY,CAAZ;AACAP,mBAAO,EAAP;AACH;AACD;AACA,YAAIQ,cAAc,CAAlB;;AAGA,eAAOR,KAAKQ,WAAL,CAAP,EAA0B;AACtB,gBAAIR,KAAKQ,WAAL,EAAkB,CAAlB,MAAyBX,GAA7B,EAAkC;AAC9B;AACH;AACDW;AACH;;AAED;AACAR,aAAKQ,WAAL,IAAoB,CAACX,GAAD,EAAMQ,KAAN,CAApB;AACH;AA5DQ;;AA+Db;AACA,SAASN,IAAT,CAAcU,MAAd,EAAsB;AAClB,WAAOA,OACFC,KADE,CACI,EADJ,EAEFC,MAFE,CAEK,CAACC,CAAD,EAAIC,CAAJ,KAAW,CAACD,KAAK,CAAN,IAAWA,CAAZ,GAAiBC,EAAEC,UAAF,CAAa,CAAb,CAFhC,EAEiD,IAFjD,CAAP;AAGH;;AAED;;AAIA,eAAK,SAAL,EAAgBC,KAAK;AACjB,QAAIC,MAAM,IAAIvB,OAAJ,EAAV;AACAuB,QAAIZ,GAAJ,CAAQ,KAAR,EAAe,GAAf;AACAY,QAAIZ,GAAJ,CAAQ,KAAR,EAAe,KAAf;AACAY,QAAIZ,GAAJ,CAAQ,KAAR,EAAe,KAAf;AACAW,MAAEE,EAAF,CAAKD,IAAIpB,GAAJ,CAAQ,KAAR,CAAL,EAAqB,GAArB;AACAmB,MAAEE,EAAF,CAAKD,IAAIpB,GAAJ,CAAQ,KAAR,CAAL,EAAqB,KAArB;AACAmB,MAAEE,EAAF,CAAKD,IAAIpB,GAAJ,CAAQ,KAAR,CAAL,EAAqBK,SAArB;AACH,CARD","file":"hashMap.js","sourcesContent":["/*class HashMap {\n    constructor() {\n        this.data = []\n    }\n    get(key) {\n        let index = hash(key)\n        let slot = this.data[index]\n        if (!slot) {\n            return undefined\n        }\n        for (let [k, v] of slot) {\n            if (key === k) {\n                return v\n            }\n        }\n    }\n    set(key, value) {\n        let index = hash(key)\n        if (!this.data[index]) {\n            this.data[index] = []\n        }\n        let slot = this.data[index]\n        let indexInSlot = 0\n\n\n        while (slot[indexInSlot]) {\n            if (slot[indexInSlot][0] === key) {\n                break\n            }\n            indexInSlot++\n        }\n\n        // переопределяем массив-пару ключ значение\n        slot[indexInSlot] = [key, value]\n    }\n}*/\n\nclass HashMap{\n    constructor(){\n        this.data = []\n    }\n\n    get(key){\n        let index = hash(key)\n        let slot = this.data[index]\n        if(!slot){\n            return undefined\n        }\n\n        for(let [k, v] of slot){\n            if(k === key){\n                return v\n            }\n        }\n    }\n\n    /*set(key, value){\n        let index = hash(key)\n        let slot = this.data[index]\n        if(!slot){\n            slot = []\n        }\n        let entryIdx = 0\n        while(slot[entryIdx]){\n            if(slot[entryIdx][0]===key){\n                break\n            }\n            entryIdx++\n        }\n        slot[entryIdx] = [key, value]\n    }*/\n\n    set(key, value) {\n        /*let index = hash(key)\n        if (!this.data[index]) {\n            this.data[index] = []\n        }*/\n        let index = hash(key)\n        let slot = this.data[index]\n        console.log(1,slot)\n        if(!slot){\n            console.log(2)\n            slot = []\n        }\n        //let slot = this.data[index]\n        let indexInSlot = 0\n\n\n        while (slot[indexInSlot]) {\n            if (slot[indexInSlot][0] === key) {\n                break\n            }\n            indexInSlot++\n        }\n\n        // переопределяем массив-пару ключ значение\n        slot[indexInSlot] = [key, value]\n    }\n}\n\n// hash function (provided)\nfunction hash(string) {\n    return string\n        .split('')\n        .reduce((a, b) => ((a << 5) + a) + b.charCodeAt(0), 5381)\n}\n\n/// tests\n\nimport { test } from 'ava'\n\ntest('HashMap', t => {\n    let map = new HashMap\n    map.set('abc', 123)\n    map.set('foo', 'bar')\n    map.set('foo', 'baz')\n    t.is(map.get('abc'), 123)\n    t.is(map.get('foo'), 'baz')\n    t.is(map.get('def'), undefined)\n})\n"]}