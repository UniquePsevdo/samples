{"version":3,"sources":["hashMap.js"],"names":["HashMap","constructor","data","get","key","index","hash","console","log","slot","undefined","k","v","set","value","indexInSlot","string","split","reduce","a","b","charCodeAt","t","map","is"],"mappings":";;AAiDA;;AAjDA,MAAMA,OAAN,CAAc;AACVC,kBAAc;AACV,aAAKC,IAAL,GAAY,EAAZ;AACH;AACDC,QAAIC,GAAJ,EAAS;AACL,YAAIC,QAAQC,KAAKF,GAAL,CAAZ;AACAG,gBAAQC,GAAR,CAAY,UAAZ,EAAwB,KAAKN,IAA7B;AACA,YAAIO,OAAO,KAAKP,IAAL,CAAUG,KAAV,CAAX;AACAE,gBAAQC,GAAR,CAAY,SAAZ,EAAuB,KAAKN,IAA5B;AACA,YAAI,CAACO,IAAL,EAAW;AACP,mBAAOC,SAAP;AACH;AACD,aAAK,IAAI,CAACC,CAAD,EAAIC,CAAJ,CAAT,IAAmBH,IAAnB,EAAyB;AACrB,gBAAIL,QAAQO,CAAZ,EAAe;AACX,uBAAOC,CAAP;AACH;AACJ;AACJ;AACDC,QAAIT,GAAJ,EAASU,KAAT,EAAgB;AACZ,YAAIT,QAAQC,KAAKF,GAAL,CAAZ;AACA,YAAI,CAAC,KAAKF,IAAL,CAAUG,KAAV,CAAL,EAAuB;AACnB,iBAAKH,IAAL,CAAUG,KAAV,IAAmB,EAAnB;AACH;;AAED,YAAII,OAAO,KAAKP,IAAL,CAAUG,KAAV,CAAX;AACA,YAAIU,cAAc,CAAlB;;AAEA;AACA;AACA,eAAON,KAAKM,WAAL,CAAP,EAA0B;AACtB,gBAAIN,KAAKM,WAAL,EAAkB,CAAlB,MAAyBX,GAA7B,EAAkC;AAC9B;AACH;AACDW;AACH;;AAEDN,aAAKM,WAAL,IAAoB,CAACX,GAAD,EAAMU,KAAN,CAApB;AACH;AArCS;;AAwCd;AACA,SAASR,IAAT,CAAcU,MAAd,EAAsB;AAClB,WAAOA,OACFC,KADE,CACI,EADJ,EAEFC,MAFE,CAEK,CAACC,CAAD,EAAIC,CAAJ,KAAW,CAACD,KAAK,CAAN,IAAWA,CAAZ,GAAiBC,EAAEC,UAAF,CAAa,CAAb,CAFhC,EAEiD,IAFjD,CAAP;AAGH;;AAED;;AAIA,eAAK,SAAL,EAAgBC,KAAK;AACjB,QAAIC,MAAM,IAAIvB,OAAJ,EAAV;AACAuB,QAAIV,GAAJ,CAAQ,KAAR,EAAe,GAAf;AACAU,QAAIV,GAAJ,CAAQ,KAAR,EAAe,KAAf;AACAU,QAAIV,GAAJ,CAAQ,KAAR,EAAe,KAAf;AACAS,MAAEE,EAAF,CAAKD,IAAIpB,GAAJ,CAAQ,KAAR,CAAL,EAAqB,GAArB;AACAmB,MAAEE,EAAF,CAAKD,IAAIpB,GAAJ,CAAQ,KAAR,CAAL,EAAqB,KAArB;AACAmB,MAAEE,EAAF,CAAKD,IAAIpB,GAAJ,CAAQ,KAAR,CAAL,EAAqBO,SAArB;AACH,CARD","file":"hashMap.js","sourcesContent":["class HashMap {\n    constructor() {\n        this.data = []\n    }\n    get(key) {\n        let index = hash(key)\n        console.log('before: ', this.data)\n        let slot = this.data[index]\n        console.log('after: ', this.data)\n        if (!slot) {\n            return undefined\n        }\n        for (let [k, v] of slot) {\n            if (key === k) {\n                return v\n            }\n        }\n    }\n    set(key, value) {\n        let index = hash(key)\n        if (!this.data[index]) {\n            this.data[index] = []\n        }\n\n        let slot = this.data[index]\n        let indexInSlot = 0\n\n        // find available index in the given slot, or overwrite the given key\n        // if a value is already defined for it.\n        while (slot[indexInSlot]) {\n            if (slot[indexInSlot][0] === key) {\n                break\n            }\n            indexInSlot++\n        }\n\n        slot[indexInSlot] = [key, value]\n    }\n}\n\n// hash function (provided)\nfunction hash(string) {\n    return string\n        .split('')\n        .reduce((a, b) => ((a << 5) + a) + b.charCodeAt(0), 5381)\n}\n\n/// tests\n\nimport { test } from 'ava'\n\ntest('HashMap', t => {\n    let map = new HashMap\n    map.set('abc', 123)\n    map.set('foo', 'bar')\n    map.set('foo', 'baz')\n    t.is(map.get('abc'), 123)\n    t.is(map.get('foo'), 'baz')\n    t.is(map.get('def'), undefined)\n})\n"]}