{"version":3,"sources":["permute.js"],"names":["permute","str","permuteArr","split","flatten","arr","reduce","acc","curr","concat","withoutArr","array","a","bs","slice","splice","indexOf","console","log","length","map","b","t","deepEqual"],"mappings":";;AA2DA;;AA3DA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAASA,OAAT,CAAiBC,GAAjB,EAAqB;AACjB,WAAOC,WAAWD,IAAIE,KAAJ,CAAU,EAAV,CAAX,CAAP;AACH;;AAED,SAASC,OAAT,CAAiBC,GAAjB,EAAqB;AACjB,WAAOA,IAAIC,MAAJ,CAAW,CAACC,GAAD,EAAMC,IAAN,KAAcD,IAAIE,MAAJ,CAAWD,IAAX,CAAzB,EAA2C,EAA3C,CAAP;AACH;;AAED;;;;;;AAMA,SAASE,UAAT,CAAoBC,KAApB,EAA2BC,CAA3B,EAA8B;AAC1B,UAAMC,KAAKF,MAAMG,KAAN,CAAY,CAAZ,CAAX;AACAD,OAAGE,MAAH,CAAUJ,MAAMK,OAAN,CAAcJ,CAAd,CAAV,EAA4B,CAA5B;AACA,WAAOC,EAAP;AACH;;AAGD,SAASX,UAAT,CAAoBG,GAApB,EAAwB;AACpBY,YAAQC,GAAR,CAAY,CAAZ;AACA,YAAOb,IAAIc,MAAX;AACI,aAAK,CAAL;AACI,mBAAO,EAAP;AACJ,aAAK,CAAL;AACIF,oBAAQC,GAAR,CAAY,CAAZ,EAAeb,GAAf;AACA,mBAAOA,GAAP;AACJ;AACI,mBAAOD,QAAQC,IAAIe,GAAJ,CAAQR,KAAGV,WAAWQ,WAAWL,GAAX,EAAgBO,CAAhB,CAAX,EAA+BQ,GAA/B,CAAmCC,KAAGT,EAAEH,MAAF,CAASY,CAAT,CAAtC,CAAX,CAAR,CAAP;AAPR;AASH;;AAED;;;AAGA,eAAKC,KAAKA,EAAEC,SAAF,CAAYvB,QAAQ,EAAR,CAAZ,EAAyB,EAAzB,CAAV;AACA,eAAKsB,KAAKA,EAAEC,SAAF,CAAYvB,QAAQ,KAAR,CAAZ,EAA4B,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,CAA5B,CAAV","file":"permute.js","sourcesContent":["/*function permute(arr){\n    return permuteArr(arr.split(''))\n}\n\nfunction permuteArr(arr){\n    switch(arr.length){\n        case 0:\n            return []\n        case 1:\n            return arr\n        default: return flatten(arr.map(a => permuteArr(without(arr, a)).map(b => a.concat(b))))\n    }\n}\n\nfunction without(arr, a){\n    let result = [...arr]\n    result.splice(arr.indexOf(a), 1)\n    return result\n}\n\nfunction flatten(arr){\n    return arr.reduce((acc, curr)=> acc.concat(curr), [])\n}*/\n\nfunction permute(str){\n    return permuteArr(str.split(''))\n}\n\nfunction flatten(arr){\n    return arr.reduce((acc, curr)=> acc.concat(curr), [])\n}\n\n/*function withoutArr(arr, a){\n    let result = [...arr]\n    result.splice(arr.indexOf(a), 1)\n    return result\n}*/\n\nfunction withoutArr(array, a) {\n    const bs = array.slice(0)\n    bs.splice(array.indexOf(a), 1)\n    return bs\n}\n\n\nfunction permuteArr(arr){\n    console.log(1);\n    switch(arr.length){\n        case 0:\n            return []\n        case 1:\n            console.log(2, arr);\n            return arr\n        default:\n            return flatten(arr.map(a=>permuteArr(withoutArr(arr, a)).map(b=>a.concat(b))))\n    }\n}\n\n// tests\nimport { test } from 'ava'\n\ntest(t => t.deepEqual(permute(''), []))\ntest(t => t.deepEqual(permute('abc'), ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']))"]}