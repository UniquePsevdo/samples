{"version":3,"sources":["hashMap.js"],"names":["hash","string","split","reduce","a","b","charCodeAt","t","map","HashMap","set","is","get","undefined"],"mappings":";;AAsFA;;AAtFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AACA,SAASA,IAAT,CAAcC,MAAd,EAAsB;AAClB,WAAOA,OACFC,KADE,CACI,EADJ,EAEFC,MAFE,CAEK,CAACC,CAAD,EAAIC,CAAJ,KAAW,CAACD,KAAK,CAAN,IAAWA,CAAZ,GAAiBC,EAAEC,UAAF,CAAa,CAAb,CAFhC,EAEiD,IAFjD,CAAP;AAGH;;AAED;;AAIA,eAAK,SAAL,EAAgBC,KAAK;AACjB,QAAIC,MAAM,IAAIC,OAAJ,EAAV;AACAD,QAAIE,GAAJ,CAAQ,KAAR,EAAe,GAAf;AACAF,QAAIE,GAAJ,CAAQ,KAAR,EAAe,KAAf;AACAF,QAAIE,GAAJ,CAAQ,KAAR,EAAe,KAAf;AACAH,MAAEI,EAAF,CAAKH,IAAII,GAAJ,CAAQ,KAAR,CAAL,EAAqB,GAArB;AACAL,MAAEI,EAAF,CAAKH,IAAII,GAAJ,CAAQ,KAAR,CAAL,EAAqB,KAArB;AACAL,MAAEI,EAAF,CAAKH,IAAII,GAAJ,CAAQ,KAAR,CAAL,EAAqBC,SAArB;AACH,CARD","file":"hashMap.js","sourcesContent":["/*class HashMap {\n    constructor() {\n        this.data = []\n    }\n    get(key) {\n        let index = hash(key)\n        let slot = this.data[index]\n        if (!slot) {\n            return undefined\n        }\n        for (let [k, v] of slot) {\n            if (key === k) {\n                return v\n            }\n        }\n    }\n    set(key, value) {\n        let index = hash(key)\n        if (!this.data[index]) {\n            this.data[index] = []\n        }\n        let slot = this.data[index]\n        let indexInSlot = 0\n\n\n        while (slot[indexInSlot]) {\n            if (slot[indexInSlot][0] === key) {\n                break\n            }\n            indexInSlot++\n        }\n\n        // переопределяем массив-пару ключ значение\n        slot[indexInSlot] = [key, value]\n    }\n}*/\n\n/*class HashMap{\n    constructor(){\n        this.data = []\n    }\n\n    get(key){\n        let index = hash(key)\n        let slot = this.data[index]\n        if(!slot){\n            return undefined\n        }\n        let slot = this.data[index]\n        for(let [k, v] of slot){\n            if(k === key){\n                return v\n            }\n        }\n    }\n\n    set(key, value){\n        let index = hash(key)\n        if (!this.data[index]) {\n            this.data[index] = []\n        }\n        let slot = this.data[index]\n        let indexInSlot = 0\n\n\n        while (slot[indexInSlot]) {\n            if (slot[indexInSlot][0] === key) {\n                break\n            }\n            indexInSlot++\n        }\n\n        // переопределяем массив-пару ключ значение\n        slot[indexInSlot] = [key, value]\n    }\n}*/\n\n// hash function (provided)\nfunction hash(string) {\n    return string\n        .split('')\n        .reduce((a, b) => ((a << 5) + a) + b.charCodeAt(0), 5381)\n}\n\n/// tests\n\nimport { test } from 'ava'\n\ntest('HashMap', t => {\n    let map = new HashMap\n    map.set('abc', 123)\n    map.set('foo', 'bar')\n    map.set('foo', 'baz')\n    t.is(map.get('abc'), 123)\n    t.is(map.get('foo'), 'baz')\n    t.is(map.get('def'), undefined)\n})\n"]}