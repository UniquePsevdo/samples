'use strict';

var _ava = require('ava');

/*
function permute(string) {
    return permuteArray(string.split(''))
}
*/

/*
function permuteArray(array) {
    switch (array.length) {
        case 0: return []
        case 1: return array
/!*
        default: return flatten(array.map(a => permuteArray(without(array, a)).map(b => a.concat(b))))
*!/
        default: return flatten(
            array.map((a) => {
            return permuteArray(without(array, a)).
                map((b) => {
                    return a.concat(b)
                })
        }))
    }
}
*/

/*
function flatten(array) {
    return array.reduce((a, b) => a.concat(b), [])
}
*/

/*function without(array, a) {
    const bs = array.slice(0)
    bs.splice(array.indexOf(a), 1)
    return bs
}*/

function permute(str) {
    return permuteArr(str.split(''));
}

function permuteArr(arr) {
    switch (arr.length) {
        case 0:
            return [];
        case 1:
            return arr;
        default:
            return flatten(arr.map(a => {
                return permuteArr(without(arr, a)).map(b => {
                    return a.concat(b);
                });
            }));
    }
}

function flatten(arr) {
    return arr.reduce((acc, curr) => acc.concat(curr), []);
}

function without(arr, a) {
    const bs = [...arr]; //the same as arr.slice(0)
    bs.splice(arr.indexOf(a), 1);
    return bs;
}

// tests


(0, _ava.test)(t => t.deepEqual(permute(''), []));
(0, _ava.test)(t => t.deepEqual(permute('abc'), ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']));
//# sourceMappingURL=/Users/mac/WebstormProjects/interview/node_modules/.cache/ava/7f8ade90d492b050ce5c0899a287003b.js.map