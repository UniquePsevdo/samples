{"version":3,"sources":["mergeSort.js"],"names":["sort","arr","length","mid","Math","floor","left","slice","right","merge","leftIdx","rightIdx","result","push","concat","t","deepEqual"],"mappings":";;AAyBA;;AAzBA,SAASA,IAAT,CAAcC,GAAd,EAAkB;AACd,QAAGA,IAAIC,MAAJ,GAAa,CAAhB,EAAkB;AACd,eAAOD,GAAP;AACH;;AAED,QAAIE,MAAMC,KAAKC,KAAL,CAAWJ,IAAIC,MAAJ,GAAa,CAAxB,CAAV;AACA,QAAII,OAAOL,IAAIM,KAAJ,EAAU,GAAGJ,GAAb,EAAX;AAAA,QACIK,QAAQP,IAAIM,KAAJ,CAAUJ,GAAV,CADZ;AAEA,WAAQM,MAAMT,KAAKM,IAAL,CAAN,EAAkBN,KAAKQ,KAAL,CAAlB,CAAR;AACH;;AAED,SAASC,KAAT,CAAeH,IAAf,EAAqBE,KAArB,EAA2B;AACvB,QAAIE,UAAU,CAAd;AAAA,QACIC,WAAW,CADf;AAAA,QAEIC,SAAS,EAFb;AAGA,WAAMF,UAAUJ,KAAKJ,MAAf,IAAyBS,WAAWH,MAAMN,MAAhD,EAAuD;AACnDU,eAAOC,IAAP,CACIP,KAAKI,OAAL,IAAgBF,MAAMG,QAAN,CAAhB,GACIL,KAAKI,SAAL,CADJ,GAEIF,MAAMG,UAAN,CAHR;AAKH;AACD,WAAOC,OAAOE,MAAP,CAAcR,KAAKC,KAAL,CAAWG,OAAX,CAAd,EAAmCI,MAAnC,CAA0CN,MAAMD,KAAN,CAAYI,QAAZ,CAA1C,CAAP;AACH;;AAGD,eAAKI,KAAGA,EAAEC,SAAF,CAAYhB,KAAK,CAAC,EAAD,EAAI,EAAJ,EAAO,CAAP,EAAS,CAAT,EAAW,EAAX,EAAc,CAAd,CAAL,CAAZ,EAAoC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CAApC,CAAR","file":"mergeSort.js","sourcesContent":["function sort(arr){\n    if(arr.length < 2){\n        return arr\n    }\n\n    let mid = Math.floor(arr.length / 2)\n    let left = arr.slice[0, mid],\n        right = arr.slice(mid);\n    return (merge(sort(left), sort(right)))\n}\n\nfunction merge(left, right){\n    let leftIdx = 0,\n        rightIdx = 0,\n        result = []\n    while(leftIdx < left.length && rightIdx < right.length){\n        result.push(\n            left[leftIdx] < right[rightIdx] ?\n                left[leftIdx++]:\n                right[rightIdx++]\n        )\n    }\n    return result.concat(left.slice(leftIdx)).concat(right.slice(rightIdx))\n}\n\nimport {test} from 'ava'\ntest(t=>t.deepEqual(sort([11,12,3,9,10,5]), [3,5,9,10,11,12]))"]}