{"version":3,"sources":["reduceAsync.js"],"names":["reduceAsync","array","fn","val","a","t","Promise","resolve","b","c","setTimeout","deepEqual","acc","current"],"mappings":";;AAkBA;;AAlBA;;;;;;;AAOA,IAAIA,cAAc,OAAOC,KAAP,EAAcC,EAAd,EAAkBC,GAAlB,KAAwB;AACtC,SAAI,IAAIC,CAAR,IAAaH,KAAb,EAAmB;AACfE,cAAMD,GAAGC,GAAH,GAAQ,MAAMC,GAAd,EAAN;AACH;AACD,WAAOD,GAAP;AACH,CALD;AAMA;AACA;AACA;AACA;;AAIA,eAAM,MAAME,CAAN,IAAU;AACZ,QAAID,IAAI,MAAME,QAAQC,OAAR,CAAgB,GAAhB,CAAd;AACA,QAAIC,IAAI,MAAMF,QAAQC,OAAR,CAAgB,GAAhB,CAAd;AACA,QAAIE,IAAI,MAAM,IAAIH,OAAJ,CAAYC,WAAS;AAC/BG,mBAAW,MAAI;AACXH,oBAAQ,GAAR;AACH,SAFD,EAEG,GAFH;AAGH,KAJa,CAAd;AAKAF,MAAEM,SAAF,CAAYX,YAAY,CAACI,CAAD,EAAII,CAAJ,EAAOC,CAAP,CAAZ,EAAuB,CAACG,GAAD,EAAMC,OAAN,KAAiB,CAAC,GAAGD,GAAJ,EAASC,OAAT,CAAxC,EAA2D,EAA3D,CAAZ,EAA4E,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAA5E;AACAR,MAAEM,SAAF,CAAYX,YAAY,CAACI,CAAD,EAAII,CAAJ,EAAOC,CAAP,CAAZ,EAAuB,CAACG,GAAD,EAAMC,OAAN,KAAiB,CAAC,GAAGD,GAAJ,EAASC,OAAT,CAAxC,EAA2D,CAAC,GAAD,CAA3D,CAAZ,EAA+E,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,CAA/E;AAEH,CAXD;;AAaA","file":"reduceAsync.js","sourcesContent":["/*let reduceAsync = async (array, fn, value) => {\n    for (let a of array) {\n        value = fn(value, await a())\n    }\n    return value\n}*/\n\nlet reduceAsync = async (array, fn, val)=>{\n    for(let a of array){\n        val = fn(val, await a())\n    }\n    return val\n}\n/// tests\n// суть тестов заключается в том, что создаются функции которые возвращают промисы с выполненными значениями\n// одно из них с таймаутом\n//\n\nimport { test } from 'ava'\n\ntest (async t =>{\n    let a = () => Promise.resolve('a')\n    let b = () => Promise.resolve('a')\n    let c = () => new Promise(resolve=>{\n        setTimeout(()=>{\n            resolve('c')\n        }, 100)\n    })\n    t.deepEqual(reduceAsync([a, b, c], (acc, current)=> [...acc, current], []), ['a','b','c'])\n    t.deepEqual(reduceAsync([a, b, c], (acc, current)=> [...acc, current], ['d']), ['d','a','b','c'])\n\n})\n\n/*test(async t => {\n    let a = () => Promise.resolve('a')\n    let b = () => Promise.resolve('b')\n    let c = () => new Promise(resolve => setTimeout(() => resolve('c'), 100))\n\n    t.deepEqual(\n        await reduceAsync([a, b, c], (accum, value) => [...accum, value], []),\n        ['a', 'b', 'c']\n    )\n    t.deepEqual(\n        await reduceAsync([a, c, b], (accum, value) => [...accum, value], ['d']),\n        ['d', 'a', 'c', 'b']\n    )\n})\n*/"]}