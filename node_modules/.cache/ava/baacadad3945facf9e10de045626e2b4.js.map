{"version":3,"sources":["permute.js"],"names":["permute","string","permuteArray","split","array","length","flatten","map","a","without","b","concat","console","log","reduce","bs","slice","splice","indexOf","t","deepEqual"],"mappings":";;AA2CA;;AA3CA,SAASA,OAAT,CAAiBC,MAAjB,EAAyB;AACrB,WAAOC,aAAaD,OAAOE,KAAP,CAAa,EAAb,CAAb,CAAP;AACH;;AAED;AACA;AACA;AACA,SAASD,YAAT,CAAsBE,KAAtB,EAA6B;AACzB,YAAQA,MAAMC,MAAd;AACI,aAAK,CAAL;AAAQ,mBAAO,EAAP;AACR,aAAK,CAAL;AAAQ,mBAAOD,KAAP;AAChB;;;AAGQ;AAAS,mBAAOE,QACZF,MAAMG,GAAN,CAAWC,CAAD,IAAO;AACjB,uBAAON,aAAaO,QAAQL,KAAR,EAAeI,CAAf,CAAb,EACHD,GADG,CACEG,CAAD,IAAO;AACP,2BAAOF,EAAEG,MAAF,CAASD,CAAT,CAAP;AACH,iBAHE,CAAP;AAIH,aALG,CADY,CAAP;AANb;AAcH;;AAED;AACA;AACA;AACA,SAASJ,OAAT,CAAiBF,KAAjB,EAAwB;AACpBQ,YAAQC,GAAR,CAAY,iBAAZ,EAA+BT,KAA/B,EAAsCA,MAAMU,MAAN,CAAa,CAACN,CAAD,EAAIE,CAAJ,KAAUF,EAAEG,MAAF,CAASD,CAAT,CAAvB,EAAoC,EAApC,CAAtC;AACA,WAAON,MAAMU,MAAN,CAAa,CAACN,CAAD,EAAIE,CAAJ,KAAUF,EAAEG,MAAF,CAASD,CAAT,CAAvB,EAAoC,EAApC,CAAP;AACH;;AAED;AACA;AACA;AACA,SAASD,OAAT,CAAiBL,KAAjB,EAAwBI,CAAxB,EAA2B;AACvB,UAAMO,KAAKX,MAAMY,KAAN,CAAY,CAAZ,CAAX;AACAD,OAAGE,MAAH,CAAUb,MAAMc,OAAN,CAAcV,CAAd,CAAV,EAA4B,CAA5B;AACA,WAAOO,EAAP;AACH;;AAED;;AAIA,eAAKI,KAAKA,EAAEC,SAAF,CAAYpB,QAAQ,EAAR,CAAZ,EAAyB,EAAzB,CAAV;AACA,eAAKmB,KAAKA,EAAEC,SAAF,CAAYpB,QAAQ,KAAR,CAAZ,EAA4B,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,CAA5B,CAAV","file":"permute.js","sourcesContent":["function permute(string) {\n    return permuteArray(string.split(''))\n}\n\n// returns array\n// uses flatten\n// inside flatten recursively permuteArray and without\nfunction permuteArray(array) {\n    switch (array.length) {\n        case 0: return []\n        case 1: return array\n/*\n        default: return flatten(array.map(a => permuteArray(without(array, a)).map(b => a.concat(b))))\n*/\n        default: return flatten(\n            array.map((a) => {\n            return permuteArray(without(array, a)).\n                map((b) => {\n                    return a.concat(b)\n                })\n        }))\n    }\n}\n\n// takes an array as argument\n// returns an array, initial []\n//\nfunction flatten(array) {\n    console.log('array incoming ', array, array.reduce((a, b) => a.concat(b), []))\n    return array.reduce((a, b) => a.concat(b), [])\n}\n\n// takes array and character\n// creates copy of an array\n// removes passed char\nfunction without(array, a) {\n    const bs = array.slice(0)\n    bs.splice(array.indexOf(a), 1)\n    return bs\n}\n\n/// tests\n\nimport { test } from 'ava'\n\ntest(t => t.deepEqual(permute(''), []))\ntest(t => t.deepEqual(permute('abc'), ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']))"]}