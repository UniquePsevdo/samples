{"version":3,"sources":["hashMap.js"],"names":["HashMap","constructor","data","get","key","index","hash","slot","undefined","k","v","set","value","entryIdx","string","split","reduce","a","b","charCodeAt","t","map","is"],"mappings":";;AA4CA;;AA5CA,MAAMA,OAAN,CAAa;AACTC,kBAAa;AACT,aAAKC,IAAL,GAAY,EAAZ;AACH;;AAEDC,QAAIC,GAAJ,EAAQ;AACJ,YAAIC,QAAQC,KAAKF,GAAL,CAAZ;AACA,YAAIG,OAAO,KAAKL,IAAL,CAAUG,KAAV,CAAX;AACA,YAAG,CAACE,IAAJ,EAAS;AACL,mBAAOC,SAAP;AACH;AACD,aAAI,IAAI,CAACC,CAAD,EAAIC,CAAJ,CAAR,IAAkBH,IAAlB,EAAuB;AACnB,gBAAGE,MAAIL,GAAP,EAAW;AACP,uBAAOM,CAAP;AACH;AACJ;AACJ;;AAEDC,QAAIP,GAAJ,EAASQ,KAAT,EAAe;AACX,YAAIP,QAAQC,KAAKF,GAAL,CAAZ;AACA,YAAG,CAAC,KAAKF,IAAL,CAAUG,KAAV,CAAJ,EAAqB;AACjB,iBAAKH,IAAL,CAAUG,KAAV,IAAmB,EAAnB;AACH;AACD,YAAIE,OAAO,KAAKL,IAAL,CAAUG,KAAV,CAAX;AACA,YAAIQ,WAAW,CAAf;AACA,eAAMN,KAAKM,QAAL,CAAN,EAAqB;AACjB,gBAAGN,KAAKM,QAAL,EAAe,CAAf,MAAoBT,GAAvB,EAA2B;AACvB;AACH;AACDS;AACH;AACDN,aAAKM,QAAL,IAAiB,CAACT,GAAD,EAAMQ,KAAN,CAAjB;AACH;AAhCQ;;AAmCb;AACA,SAASN,IAAT,CAAcQ,MAAd,EAAsB;AAClB,WAAOA,OACFC,KADE,CACI,EADJ,EAEFC,MAFE,CAEK,CAACC,CAAD,EAAIC,CAAJ,KAAW,CAACD,KAAK,CAAN,IAAWA,CAAZ,GAAiBC,EAAEC,UAAF,CAAa,CAAb,CAFhC,EAEiD,IAFjD,CAAP;AAGH;;AAED;;AAIA,eAAK,SAAL,EAAgBC,KAAK;AACjB,QAAIC,MAAM,IAAIrB,OAAJ,EAAV;AACAqB,QAAIV,GAAJ,CAAQ,KAAR,EAAe,GAAf;AACAU,QAAIV,GAAJ,CAAQ,KAAR,EAAe,KAAf;AACAU,QAAIV,GAAJ,CAAQ,KAAR,EAAe,KAAf;AACAS,MAAEE,EAAF,CAAKD,IAAIlB,GAAJ,CAAQ,KAAR,CAAL,EAAqB,GAArB;AACAiB,MAAEE,EAAF,CAAKD,IAAIlB,GAAJ,CAAQ,KAAR,CAAL,EAAqB,KAArB;AACAiB,MAAEE,EAAF,CAAKD,IAAIlB,GAAJ,CAAQ,KAAR,CAAL,EAAqBK,SAArB;AACH,CARD","file":"hashMap.js","sourcesContent":["class HashMap{\n    constructor(){\n        this.data = []\n    }\n\n    get(key){\n        let index = hash(key)\n        let slot = this.data[index]\n        if(!slot){\n            return undefined\n        }\n        for(let [k, v] of slot){\n            if(k===key){\n                return v\n            }\n        }\n    }\n\n    set(key, value){\n        let index = hash(key)\n        if(!this.data[index]){\n            this.data[index] = []\n        }\n        let slot = this.data[index]\n        let entryIdx = 0;\n        while(slot[entryIdx]){\n            if(slot[entryIdx][0]===key){\n                break\n            }\n            entryIdx++\n        }\n        slot[entryIdx] = [key, value]\n    }\n}\n\n// hash function (provided)\nfunction hash(string) {\n    return string\n        .split('')\n        .reduce((a, b) => ((a << 5) + a) + b.charCodeAt(0), 5381)\n}\n\n/// tests\n\nimport { test } from 'ava'\n\ntest('HashMap', t => {\n    let map = new HashMap\n    map.set('abc', 123)\n    map.set('foo', 'bar')\n    map.set('foo', 'baz')\n    t.is(map.get('abc'), 123)\n    t.is(map.get('foo'), 'baz')\n    t.is(map.get('def'), undefined)\n})\n"]}