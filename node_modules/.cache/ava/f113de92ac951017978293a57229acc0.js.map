{"version":3,"sources":["reduceAsync.js"],"names":["reduceAsync","arr","fn","val","a","t","Promise","resolve","b","c","setTimeout","deepEqual","acc","curr"],"mappings":";;AAiBA;;AAjBA;;;;;;;;;AASA,IAAIA,cAAc,OAAOC,GAAP,EAAYC,EAAZ,EAAgBC,GAAhB,KAAsB;AACpC,SAAI,IAAIC,CAAR,IAAaH,GAAb,EAAiB;AACbE,cAAMD,GAAGC,GAAH,GAAQ,MAAMC,GAAd,EAAN;AACH;AACD,WAAOD,GAAP;AACH,CALD;;AAUA;;;;;;;;;;AAUA,eAAK,MAAME,CAAN,IAAS;AACV,QAAID,IAAI,MAAME,QAAQC,OAAR,CAAgB,GAAhB,CAAd;AACA,QAAIC,IAAI,MAAMF,QAAQC,OAAR,CAAgB,GAAhB,CAAd;AACA,QAAIE,IAAI,MAAM,IAAIH,OAAJ,CAAYC,WAAWG,WAAW,MAAI;AAACH,gBAAQ,GAAR;AAAa,KAA7B,CAAvB,CAAd;AACAF,MAAEM,SAAF,CAAY,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAZ,GAA6B,MAAMX,YAAY,CAACI,CAAD,EAAII,CAAJ,EAAOC,CAAP,CAAZ,EAAuB,CAACG,GAAD,EAAMC,IAAN,KAAa,CAAC,GAAGD,GAAJ,EAASC,IAAT,CAApC,EAAoD,EAApD,CAAnC;AACH,CALD","file":"reduceAsync.js","sourcesContent":["/*\nlet reduceAsync = async function (arr, fn, val){\n    for(let a of arr){\n        val = fn(val, await a())\n    }\n    return val\n}\n*/\n\nlet reduceAsync = async (arr, fn, val)=>{\n    for(let a of arr){\n        val = fn(val, await a())\n    }\n    return val;\n}\n\n\nimport { test } from 'ava'\n\n/*\ntest(async t => {\n    let a = () => Promise.resolve('a')\n    let b = () => Promise.resolve('b')\n    let c = () => new Promise(resolve => { setTimeout(()=>{resolve('c')}, 100)})\n\n    t.deepEqual(['a', 'b', 'c'], await reduceAsync([a, b, c], (acc, current) => [...acc, current], []))\n    t.deepEqual(['d', 'a', 'b', 'c'], await reduceAsync([a, b, c], (acc, current) => [...acc, current], ['d']))\n\n})*/\ntest(async t=>{\n    let a = () => Promise.resolve('a');\n    let b = () => Promise.resolve('b');\n    let c = () => new Promise(resolve => setTimeout(()=>{resolve('c')}))\n    t.deepEqual(['a', 'b', 'c'], await reduceAsync([a, b, c], (acc, curr)=>[...acc, curr], []))\n})"]}