{"version":3,"sources":["permute.js"],"names":["permute","str","permuteArr","split","arr","length","flatten","map","a","without","b","concat","splice","indexOf","t","deepEqual"],"mappings":";;AA8DA;;AA9DA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;AAMA;;;;;;AAMA,SAASA,OAAT,CAAiBC,GAAjB,EAAqB;AACjB,WAAOC,WAAWD,IAAIE,KAAJ,CAAU,EAAV,CAAX,CAAP;AACH;;AAED,SAASD,UAAT,CAAoBE,GAApB,EAAwB;AACpB,YAAOA,IAAIC,MAAX;AACI,aAAK,CAAL;AACI,mBAAO,EAAP;AACJ,aAAK,CAAL;AACI,mBAAOD,GAAP;AACJ;AAAS,mBAAOE,QAAQF,IAAIG,GAAJ,CAASC,CAAD,IAAK;AACjC,uBAAON,WAAWO,QAAQL,GAAR,EAAaI,CAAb,CAAX,EACHD,GADG,CACEG,CAAD,IAAK;AACL,2BAAOF,EAAEG,MAAF,CAASD,CAAT,CAAP;AACP,iBAHM,CAAP;AAIH,aALuB,CAAR,CAAP;;AALb;AAaH;;AAED,SAASD,OAAT,CAAiBL,GAAjB,EAAsBI,CAAtB,EAAwB;AACpB,WAAO,CAAC,GAAGJ,GAAJ,EAASQ,MAAT,CAAgBR,IAAIS,OAAJ,CAAYL,CAAZ,CAAhB,EAAgC,CAAhC,CAAP;AACH;;AAED;;;AAGA,eAAKM,KAAKA,EAAEC,SAAF,CAAYf,QAAQ,EAAR,CAAZ,EAAyB,EAAzB,CAAV;AACA,eAAKc,KAAKA,EAAEC,SAAF,CAAYf,QAAQ,KAAR,CAAZ,EAA4B,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,CAA5B,CAAV","file":"permute.js","sourcesContent":["/*\nfunction permute(string) {\n    return permuteArray(string.split(''))\n}\n*/\n\n/*\nfunction permuteArray(array) {\n    switch (array.length) {\n        case 0: return []\n        case 1: return array\n/!*\n        default: return flatten(array.map(a => permuteArray(without(array, a)).map(b => a.concat(b))))\n*!/\n        default: return flatten(\n            array.map((a) => {\n            return permuteArray(without(array, a)).\n                map((b) => {\n                    return a.concat(b)\n                })\n        }))\n    }\n}\n*/\n\n/*\nfunction flatten(array) {\n    return array.reduce((a, b) => a.concat(b), [])\n}\n*/\n\n/*function without(array, a) {\n    const bs = array.slice(0)\n    bs.splice(array.indexOf(a), 1)\n    return bs\n}*/\n\nfunction permute(str){\n    return permuteArr(str.split(''))\n}\n\nfunction permuteArr(arr){\n    switch(arr.length){\n        case 0:\n            return []\n        case 1:\n            return arr\n        default: return flatten(arr.map((a)=>{\n            return permuteArr(without(arr, a)).\n                map((b)=>{\n                    return a.concat(b)\n            })\n        }))\n\n    }\n}\n\nfunction without(arr, a){\n    return [...arr].splice(arr.indexOf(a), 1)\n}\n\n// tests\nimport { test } from 'ava'\n\ntest(t => t.deepEqual(permute(''), []))\ntest(t => t.deepEqual(permute('abc'), ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']))"]}