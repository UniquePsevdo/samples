'use strict';

var _ava = require('ava');

/*function permute(arr){
    return permuteArr(arr.split(''))
}

function permuteArr(arr){
    switch(arr.length){
        case 0:
            return []
        case 1:
            return arr
        default: return flatten(arr.map(a => permuteArr(without(arr, a)).map(b => a.concat(b))))
    }
}

function without(arr, a){
    let result = [...arr]
    result.splice(arr.indexOf(a), 1)
    return result
}

function flatten(arr){
    return arr.reduce((acc, curr)=> acc.concat(curr), [])
}*/

function permute(str) {
    return permuteArr(str.split(''));
}

function flatten(arr) {
    console.log(arr);
    return arr.reduce((acc, curr) => acc.concat(curr), []);
}

/*function withoutArr(arr, a){
    let result = [...arr]
    result.splice(arr.indexOf(a), 1)
    return result
}*/

function withoutArr(array, a) {
    const bs = array.slice(0);
    bs.splice(array.indexOf(a), 1);
    return bs;
}

function permuteArr(arr) {
    switch (arr.length) {
        case 0:
            return [];
        case 1:
            return arr;
        default:
            return flatten(arr.map(a => permuteArr(withoutArr(arr, a)).map(b => a.concat(b))));
    }
}

// tests


(0, _ava.test)(t => t.deepEqual(permute(''), []));
(0, _ava.test)(t => t.deepEqual(permute('abc'), ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']));
//# sourceMappingURL=/Users/mac/WebstormProjects/interview/node_modules/.cache/ava/26373e370ba006def58182a2ad2f7791.js.map