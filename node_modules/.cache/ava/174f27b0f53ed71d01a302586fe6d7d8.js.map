{"version":3,"sources":["seq.js"],"names":["seq","arr","result","a","t","Promise","resolve","b","c","setTimeout","deepEqual"],"mappings":";;AAOA;;AAPC,IAAIA,MAAM,MAAMC,GAAN,IAAY;AACnB,QAAIC,SAAS,EAAb;AACA,SAAI,IAAIC,CAAR,IAAaF,GAAb,EAAiB;AACb,cAAME,GAAN;AACH;AACD,WAAOD,MAAP;AACF,CAND;;;AASD,eAAM,MAAME,CAAN,IAAU;AACZ,QAAID,IAAI,MAAME,QAAQC,OAAR,CAAgB,GAAhB,CAAd;AACA,QAAIC,IAAI,MAAMF,QAAQC,OAAR,CAAgB,GAAhB,CAAd;AACA,QAAIE,IAAI,IAAIH,OAAJ,CAAYC,WAAWG,WAAW,MAAI;AAAEH,gBAAQ,GAAR;AAAc,KAA/B,EAAiC,GAAjC,CAAvB,CAAR;AACAF,MAAEM,SAAF,CAAY,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAZ,GAA2B,MAAMV,IAAI,CAACG,CAAD,EAAII,CAAJ,EAAOC,CAAP,CAAJ,CAAjC;AACH,CALD","file":"seq.js","sourcesContent":[" let seq = async(arr)=>{\n    let result = []\n    for(let a of arr){\n        await a()\n    }\n    return result\n }\nimport {test} from 'ava'\n\ntest( async t =>{\n    let a = () => Promise.resolve('a')\n    let b = () => Promise.resolve('b')\n    let c = new Promise(resolve => setTimeout(()=>{ resolve('c') }, 100));\n    t.deepEqual(['a','b','c'], await seq([a, b, c]))\n})"]}