{"version":3,"sources":["factorial.js"],"names":["factorial","n","tailFactorial","total","t","is"],"mappings":";;AAiDA;;AAjDA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;AAcA,SAASA,SAAT,CAAmBC,CAAnB,EAAqB;AACjBC,kBAAcD,CAAd,EAAiB,CAAjB;AACH;;AAED,SAASC,aAAT,CAAuBD,CAAvB,EAA0BE,KAA1B,EAAgC;AAC5B,YAAOF,CAAP;AACI,aAAK,CAAL;AACI,mBAAO,CAAP;AACJ,aAAK,CAAL;AACI,mBAAO,CAAP;AACJ;AAAS,mBAAOC,cAAcD,IAAE,CAAhB,EAAmBE,QAAMF,CAAzB,CAAP;AALb;AAQH;;AAID,eAAK,uBAAL,EAA8BG,KAAKA,EAAEC,EAAF,CAAKL,UAAU,CAAV,CAAL,EAAmB,GAAnB,CAAnC","file":"factorial.js","sourcesContent":["/*function tailFactorial(n, total) {\n    switch (n) {\n        case 0: return 1\n        case 1: return total\n        default: return tailFactorial(n - 1, n * total)\n    }\n}\n\nfunction factorial(n) {\nif (x < 0) throw Error(\"Cannot calculate factorial of a negative number\");\n    return tailFactorial(n, 1)\n}*/\n\n// суть заключается в том чтобы рекурсивно пройтись из хвоста tail до 1,\n// в функции tailFactorial(n, total)\n// n - это число для которого нужно вычислить факториал\n// 1 передается в качестве инициализационного вызова параметра total\n// n - факториал искомого числа в функции factorial\n// total - параметр который накапливает итоговое значение\n\n/*function tailFactorial(n, total){\n    switch(n){\n        case 0:\n            return 1\n        case 1:\n            return total\n        default: return tailFactorial(n-1, n*total)\n    }\n}\n\nfunction factorial(n){\n    return tailFactorial(n, 1);\n}*/\n\nfunction factorial(n){\n    tailFactorial(n, 1);\n}\n\nfunction tailFactorial(n, total){\n    switch(n){\n        case 0:\n            return 0\n        case 1:\n            return 1\n        default: return tailFactorial(n-1, total*n)\n    }\n\n}\n\nimport { test } from 'ava'\n\ntest('factorial of 5 is 120', t => t.is(factorial(5), 120))"]}