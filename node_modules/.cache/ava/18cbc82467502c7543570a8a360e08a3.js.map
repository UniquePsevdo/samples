{"version":3,"sources":["seq.js"],"names":["seq","arr","result","a","push","t","Promise","resolve","b","c","setTimeout","deepEqual"],"mappings":";;AAcA;;AAdC;;;;;;;AAOA,eAAeA,GAAf,CAAmBC,GAAnB,EAAuB;AACnB,QAAIC,SAAS,EAAb;AACA,SAAI,IAAIC,CAAR,IAAaF,GAAb,EAAiB;AACbC,eAAOE,IAAP,EAAY,MAAMD,GAAlB;AACH;AACD,WAAOD,MAAP;AACH;;;AAGF;;;;;;;;;AASA,eAAKG,KAAG;AACJ,QAAIF,IAAI,MAAMG,QAAQC,OAAR,CAAiB,GAAjB,CAAd;AACA,QAAIC,IAAI,MAAMF,QAAQC,OAAR,CAAgB,GAAhB,CAAd;AACA,QAAIE,IAAI,MAAM,IAAIH,OAAJ,CAAYC,WAASG,WAAW,MAAI;AAACH,gBAAQ,GAAR;AAAa,KAA7B,CAArB,CAAd;AACAF,MAAEM,SAAF,CAAY,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAZ,EAA2B,CAACR,CAAD,EAAGK,CAAH,EAAKC,CAAL,CAA3B;AACH,CALD","file":"seq.js","sourcesContent":[" /*let seq = async(arr)=>{\n    let result = []\n    for(let a of arr){\n        result.push(await a())\n    }\n    return result\n }*/\n async function seq(arr){\n     let result = []\n     for(let a of arr){\n         result.push(await a())\n     }\n     return result\n }\nimport {test} from 'ava'\n\n/*\ntest( async t =>{\n    let a = () => Promise.resolve('a')\n    let b = () => Promise.resolve('b')\n    let c = () => new Promise(resolve => setTimeout(()=>{ resolve('c') }, 100));\n\n    t.deepEqual(['a','b','c'], await seq([a, b, c]))\n})*/\n\ntest(t=>{\n    let a = () => Promise.resolve(('a'));\n    let b = () => Promise.resolve('b')\n    let c = () => new Promise(resolve=>setTimeout(()=>{resolve('c')}))\n    t.deepEqual(['a','b','c'], [a,b,c])\n})\n"]}